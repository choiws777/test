{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "startup",
      "language": "python",
      "name": "startup"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "latex_envs": {
      "LaTeX_envs_menu_present": true,
      "autoclose": false,
      "autocomplete": true,
      "bibliofile": "biblio.bib",
      "cite_by": "apalike",
      "current_citInitial": 1,
      "eqLabelWithNumbers": true,
      "eqNumInitial": 1,
      "hotkeys": {
        "equation": "Ctrl-E",
        "itemize": "Ctrl-I"
      },
      "labels_anchors": false,
      "latex_user_defs": false,
      "report_style_numbering": false,
      "user_envs_cfg": false
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": true,
      "toc_position": {
        "height": "calc(100% - 180px)",
        "left": "10px",
        "top": "150px",
        "width": "250px"
      },
      "toc_section_display": true,
      "toc_window_display": true
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": false
    },
    "colab": {
      "name": "CNA6_day2-2.ipynb의 사본",
      "provenance": [],
      "collapsed_sections": [
        "FXSXH3kI-4sb",
        "lutxF18V-4sc",
        "OWSPH6FP-4sc",
        "OHEt8P_Q-4sc",
        "K_J3JY7B-4sd",
        "UFGd3Yhf-4se",
        "vA4Jf-SL-4sf",
        "vK0u4e_f-4sf",
        "h2eQXEEF-4sf",
        "3vm4gwyn-4sg",
        "6RKO8QlO-4sg",
        "SnNQCrRn-4sh",
        "CC0aISdJ_QgC",
        "CSH3WMXKRIp0"
      ],
      "toc_visible": true,
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/choiws777/test/blob/master/CNA6_day2_2_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.ipynb-1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NDYhUqn6-4sQ"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g9jct_tE-4sT"
      },
      "source": [
        "# <center>멤버십 고객 탈회 예측</center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RuEpLgbm-4sU"
      },
      "source": [
        "컬럼 | 설명 | 컬럼 | 설명\n",
        "---|---|---|---\n",
        "id | 멤버십 번호 | MEMBERSHIP_TERM_YEARS | 멤버십 기간\n",
        "ANNUAL_FEES | 연간 회비 | MEMBER_MARITAL_STATUS | 기혼 여부, M(기혼), S(미혼)\n",
        "MEMBER_GENDER | 성별, M(남),F(여) | MEMBER_ANNUAL_INCOME | 연봉(연간 수입)\n",
        "MEMBER_OCCUPATION_CD | 직업 | MEMBERSHIP_PACKAGE | 멤버십 유형\n",
        "MEMBER_AGE_AT_ISSUE | 나이 | ADDITIONAL_MEMBERS | 가족 회원의 수\n",
        "PAYMENT_MODE | 지불 방식 | AGENT_CODE | 직원 코드 \n",
        "START_DATE (YYYYMMDD) | 시작 날짜 | END_DATE  (YYYYMMDD) | 종료 날짜 \n",
        "MEMBERSHIP_STATUS | 0(유지), 1(탈회) | "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nUSDH9ul_2QM"
      },
      "source": [
        "# 이 과제에서는 F1 스코어를 쓸거니 잘 보삼"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_P5jCpj3-4sU"
      },
      "source": [
        "# Import Library"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ea6uNBTY-4sV"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(action='ignore')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aff5a922-6058-432e-9b19-48ee589e0596"
      },
      "source": [
        "# 데이터셋 업로드"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2f2c24ff-1f3d-430d-85fe-bab82940b12f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ddbfa5c8-6bea-41fa-9c12-9e2aa9f38ea8"
      },
      "source": [
        "# 구글 드라이브 연결하기\n",
        "from google.colab import drive\n",
        "drive.mount('./MyDrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at ./MyDrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-TrLuW0X-4sW"
      },
      "source": [
        "# Load Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RMr5etHr-4sW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "outputId": "4d0ac1c7-8793-478f-97cc-9a0fb26fa530"
      },
      "source": [
        "train = pd.read_csv(\"/content/MyDrive/MyDrive/motor_temperature-20211118T021215Z-001/motor_temperature/train.csv\")\n",
        "print(train.shape)\n",
        "train.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(200000, 9)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>ambient</th>\n",
              "      <th>coolant</th>\n",
              "      <th>motor_speed</th>\n",
              "      <th>u_q</th>\n",
              "      <th>u_d</th>\n",
              "      <th>i_d</th>\n",
              "      <th>i_q</th>\n",
              "      <th>pm</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>26.351160</td>\n",
              "      <td>64.363928</td>\n",
              "      <td>2922.485778</td>\n",
              "      <td>128.225872</td>\n",
              "      <td>-29.600023</td>\n",
              "      <td>-16.722047</td>\n",
              "      <td>28.266956</td>\n",
              "      <td>66.688690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>26.018845</td>\n",
              "      <td>80.605671</td>\n",
              "      <td>1913.623302</td>\n",
              "      <td>70.050099</td>\n",
              "      <td>75.969371</td>\n",
              "      <td>-37.767195</td>\n",
              "      <td>-127.116627</td>\n",
              "      <td>64.558285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>26.233084</td>\n",
              "      <td>85.366168</td>\n",
              "      <td>0.004871</td>\n",
              "      <td>0.343952</td>\n",
              "      <td>-0.807201</td>\n",
              "      <td>-2.000640</td>\n",
              "      <td>1.097852</td>\n",
              "      <td>81.379509</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>25.859851</td>\n",
              "      <td>81.489642</td>\n",
              "      <td>2585.293386</td>\n",
              "      <td>111.671886</td>\n",
              "      <td>51.157701</td>\n",
              "      <td>-10.948034</td>\n",
              "      <td>-56.338080</td>\n",
              "      <td>62.454746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>20.505171</td>\n",
              "      <td>18.593714</td>\n",
              "      <td>1449.987549</td>\n",
              "      <td>56.055401</td>\n",
              "      <td>-77.052261</td>\n",
              "      <td>-65.980156</td>\n",
              "      <td>172.999969</td>\n",
              "      <td>35.819004</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id    ambient    coolant  ...        i_d         i_q         pm\n",
              "0   0  26.351160  64.363928  ... -16.722047   28.266956  66.688690\n",
              "1   1  26.018845  80.605671  ... -37.767195 -127.116627  64.558285\n",
              "2   2  26.233084  85.366168  ...  -2.000640    1.097852  81.379509\n",
              "3   3  25.859851  81.489642  ... -10.948034  -56.338080  62.454746\n",
              "4   4  20.505171  18.593714  ... -65.980156  172.999969  35.819004\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bO03THxw-4sX"
      },
      "source": [
        "test = pd.read_csv(\"/content/MyDrive/MyDrive/DB/DB_CNA6_실습파일/membership/test.csv\")\n",
        "print(test.shape)\n",
        "test.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gULpK49K-4sX"
      },
      "source": [
        "submission = pd.read_csv(\"/content/MyDrive/MyDrive/DB/DB_CNA6_실습파일/membership/sample_submission.csv\")\n",
        "submission.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8OeWpkjW-4sY"
      },
      "source": [
        "# 데이터 탐색 (EDA)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g-apHLCj-4sY"
      },
      "source": [
        "### 데이터프레임 기본 정보"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O99Kgx8s-4sY"
      },
      "source": [
        "train.info()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YLbNNGA8-4sZ"
      },
      "source": [
        "### 통계정보 요약"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7xUsKxDv-4sZ"
      },
      "source": [
        "train.describe()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T5OcLQ1f-4sZ"
      },
      "source": [
        "### 중복행 개수"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iwnkg6oR-4sZ"
      },
      "source": [
        "train.duplicated().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "by3d498g-4sa"
      },
      "source": [
        "test.duplicated().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4QR1l8ny-4sa"
      },
      "source": [
        "### 결측치 개수"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BIK42CnZ-4sa"
      },
      "source": [
        "train.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Se7h4Z7n-4sa"
      },
      "source": [
        "test.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uR5Nn8Sm-4sb"
      },
      "source": [
        "# Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FXSXH3kI-4sb"
      },
      "source": [
        "## 컬럼명을 간결하게 바꾸기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0lJk5UPD-4sb"
      },
      "source": [
        "train.columns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EnCgB7AK-4sb"
      },
      "source": [
        "train.columns = ['id', 'term', 'fee', 'married', 'gender', 'income', 'job',\n",
        "'package', 'age', 'family', 'payment', 'agent', 'target', 'stard_date', 'end_date']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p_FGZusZ-4sb"
      },
      "source": [
        "test.columns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KWJSHmIt-4sb"
      },
      "source": [
        "test.columns = ['id', 'term', 'fee', 'married', 'gender', 'income', 'job',\n",
        "'package', 'age', 'family', 'payment', 'agent', 'stard_date']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lutxF18V-4sc"
      },
      "source": [
        "## 결측값 처리"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l6mbGDqr-4sc"
      },
      "source": [
        "train.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mQn5Zjif-4sc"
      },
      "source": [
        "test.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OWSPH6FP-4sc"
      },
      "source": [
        "### 결측값 제거"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XwCPRGrN-4sc"
      },
      "source": [
        "# end_date 열 삭제\n",
        "train.drop(['end_date'], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fmhh0gQ_-4sc"
      },
      "source": [
        "train = train.drop(['end_date'], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OHEt8P_Q-4sc"
      },
      "source": [
        "### 평균값 대체"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C9Ay7pjg-4sd"
      },
      "source": [
        "# income\n",
        "train['income'].mean()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FpM3Une_-4sd"
      },
      "source": [
        "income_mean = train['income'].mean()\n",
        "train['income'] = train['income'].fillna(income_mean)\n",
        "test['income'] = test['income'].fillna(income_mean)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CYqBqef3-4sd"
      },
      "source": [
        "sns.displot(x='income', hue='target', data=train, palette=\"PRGn\");"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K_J3JY7B-4sd"
      },
      "source": [
        "### 최빈값 대체"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2QJ8AkEg-4sd"
      },
      "source": [
        "# gender\n",
        "train['gender'].mode()[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8aC7De99-4sd"
      },
      "source": [
        "train['gender'] = train['gender'].fillna(train['gender'].mode()[0])\n",
        "test['gender'] = test['gender'].fillna(train['gender'].mode()[0])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ECQWQG0o-4sd"
      },
      "source": [
        "sns.countplot(x='gender', hue='target', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UFGd3Yhf-4se"
      },
      "source": [
        "### 결측값을 별도로 표시"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yo2Yp5FK-4se"
      },
      "source": [
        "# married\n",
        "train['married'].value_counts(dropna=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4b7mb7RL-4se"
      },
      "source": [
        "train['married'] = train['married'].fillna('U')\n",
        "test['married'] = test['married'].fillna('U')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3g_GQC1C-4se"
      },
      "source": [
        "sns.countplot(x='married', hue='target', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lYaCjmNN-4se"
      },
      "source": [
        "# [실습]\n",
        "job 컬럼에 속하는 결측값을 적절하게 처리합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x6pjmAv0-4se"
      },
      "source": [
        "# job\n",
        "train['job'].value_counts(dropna=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tsVgXhA0-4se"
      },
      "source": [
        "train['job'] = train['job'].fillna(train['job'].mode()[0])\n",
        "test['job'] = test['job'].fillna(train['job'].mode()[0])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D9_VmqZn-4se"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vA4Jf-SL-4sf"
      },
      "source": [
        "## Label Encoding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oqUztvN3-4sf"
      },
      "source": [
        "# 범주형 변수\n",
        "categorical_features = []\n",
        "for col in train.columns:\n",
        "    if train[col].dtype == 'O':\n",
        "        categorical_features.append(col)\n",
        "        \n",
        "categorical_features"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vK0u4e_f-4sf"
      },
      "source": [
        "### gender"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "43V50jlS-4sf"
      },
      "source": [
        "train['gender'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VJRi9Eek-4sf"
      },
      "source": [
        "# Label Encoding\n",
        "train.loc[train['gender']=='M', 'gender'] = 0\n",
        "train.loc[train['gender']=='F', 'gender'] = 1\n",
        "\n",
        "test.loc[test['gender']=='M', 'gender'] = 0\n",
        "test.loc[test['gender']=='F', 'gender'] = 1\n",
        "\n",
        "train['gender'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h2eQXEEF-4sf"
      },
      "source": [
        "### married"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CcjqizbH-4sf"
      },
      "source": [
        "train['married'].value_counts(dropna=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m6tnAfeU-4sf"
      },
      "source": [
        "# Label Encoder 활용\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "encoder = LabelEncoder()\n",
        "encoder.fit(train['married'])\n",
        "train['married'] = encoder.transform(train['married'])\n",
        "test['married'] = encoder.transform(test['married'])\n",
        "\n",
        "train['married'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3vm4gwyn-4sg"
      },
      "source": [
        "## [Quiz]\n",
        "package 변수의 범주형 자료를 Label Encoding 기법을 적용하여 숫자로 변환합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yM-qSBtg-4sg"
      },
      "source": [
        "train['package'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dS2-HEs8-4sg"
      },
      "source": [
        "# Label Encoding\n",
        "train.loc[train['package']=='TYPE-A', 'package'] = 0\n",
        "train.loc[train['package']=='TYPE-B', 'package'] = 1\n",
        "\n",
        "test.loc[test['package']=='TYPE-A', 'package'] = 0\n",
        "test.loc[test['package']=='TYPE-B', 'package'] = 1\n",
        "\n",
        "train['package'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XUI7RMMf-4sg"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6RKO8QlO-4sg"
      },
      "source": [
        "## One-hot Encoding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zEaiIa1x-4sg"
      },
      "source": [
        "# One-Hot Encoding\n",
        "\n",
        "pd.get_dummies(train, columns = ['payment'], drop_first=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T6YirOyL-4sh"
      },
      "source": [
        "pd.get_dummies(train, columns = ['payment'], drop_first=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_i7wJPbU-4sh"
      },
      "source": [
        "# train, test 결합 \n",
        "data = train.append(test)\n",
        "data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9dyJp0tn-4sh"
      },
      "source": [
        "data = pd.get_dummies(data, columns = ['payment'], drop_first=True)\n",
        "data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "guCOS5IH-4sh"
      },
      "source": [
        "new_train = data[data['target'].notnull()]\n",
        "new_test = data[data['target'].isnull()]\n",
        "\n",
        "new_train.shape, new_test.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IJ2dpd9f-4sh"
      },
      "source": [
        "new_test"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6jqvUFGb-4sh"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SnNQCrRn-4sh"
      },
      "source": [
        "## Binning"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iIL8H6_HJdtK"
      },
      "source": [
        "# Age 분포\n",
        "sns.displot(x='age', kind='hist', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kX40IsQz-4si"
      },
      "source": [
        "age_bins = [0, 20, 30, 40, 50, 60, 70, 150]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LGCueNxU-4si"
      },
      "source": [
        "age_labels = ['10-', '20s', '30s', '40s', '50s', '60s', '70+']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TjotK-d3-4si"
      },
      "source": [
        "pd.cut(train['age'], bins=age_bins, labels=age_labels)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cA2fKQ9H-4si"
      },
      "source": [
        "train['age_bin'] = pd.cut(train['age'], bins=age_bins, labels=age_labels)\n",
        "train['age_bin'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uGS1WgzL-4si"
      },
      "source": [
        "sns.countplot(x='age_bin', hue='target', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z03Dr7Hp-4si"
      },
      "source": [
        "test['age_bin'] = pd.cut(test['age'], bins=age_bins, labels=age_labels)\n",
        "test['age_bin'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XlSEFoLs-4si"
      },
      "source": [
        "sns.displot(x='age_bin', kind='hist', hue='target', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CC0aISdJ_QgC"
      },
      "source": [
        "## Feature interaction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OIxRifSc-4sj"
      },
      "source": [
        "train[\"gender\"].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j_hNsC6X-4sj"
      },
      "source": [
        "train[\"gender\"].astype(str)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7i0sHqha-4sj"
      },
      "source": [
        "train[\"age_bin\"].astype(str) + '_' + train[\"gender\"].astype(str)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y7W7ogRk-4sj"
      },
      "source": [
        "# Age_Bin과 Gender 결합\n",
        "train['age_gender'] = train[\"age_bin\"].astype(str) + '_' + train[\"gender\"].astype(str)\n",
        "train['age_gender'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0SnInMMp-4sj"
      },
      "source": [
        "sns.displot(x='age_gender', kind='hist', hue='target', data=train)\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-t5IQdUh-4sj"
      },
      "source": [
        "test['age_gender'] = test[\"age_bin\"].astype(str) + '_' + test[\"gender\"].astype(str)\n",
        "test['age_gender'].value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CSH3WMXKRIp0"
      },
      "source": [
        "## 로그 변환"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nIxQjizjMyE-"
      },
      "source": [
        "# Annual_Premium 분포\n",
        "sns.displot(x='fee', kind='kde', hue='target', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VmL_tlYR-4sj"
      },
      "source": [
        "# log 변환\n",
        "train['fee_log'] = np.log1p(train['fee'])\n",
        "train['fee_log']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AVjGLoOSsK8R"
      },
      "source": [
        "sns.displot(x='fee_log', kind='kde', hue='target', data=train);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4R0-nNlp-4sk"
      },
      "source": [
        "test['fee_log'] = np.log1p(test['fee'])\n",
        "sns.displot(x='fee_log', kind='kde', data=test);"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EBPCyuRd-4sk"
      },
      "source": [
        "# Baseline 모델"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KMt1PRwG-4sk"
      },
      "source": [
        "train.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hYLPI306-4sk"
      },
      "source": [
        "## Feature 선택"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LkJ-jNTx-4sk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f99e0710-70af-4eda-db6b-ba100a114860"
      },
      "source": [
        "# 숫자형 변수 선택\n",
        "for col in train.columns:\n",
        "    if not train[col].dtype=='object':\n",
        "        print(col)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "id\n",
            "ambient\n",
            "coolant\n",
            "motor_speed\n",
            "u_q\n",
            "u_d\n",
            "i_d\n",
            "i_q\n",
            "pm\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fRwwFDSo-4sk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af293c5c-c35e-4a5b-c1c4-421a83725bc3"
      },
      "source": [
        "print([col for col in train.columns[1:] if not train[col].dtype=='object'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['ambient', 'coolant', 'motor_speed', 'u_q', 'u_d', 'i_d', 'i_q', 'pm']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CTleYGfi-4sk"
      },
      "source": [
        "## X, y 변수 정리"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "czZ4IiIq-4sl"
      },
      "source": [
        "selected_features = ['term', 'fee', 'married', 'income', 'job', 'age', 'family']\n",
        "\n",
        "X_train = train.loc[:, selected_features]\n",
        "X_test = test.loc[:, selected_features]\n",
        "\n",
        "y_train = train.loc[:, 'target']\n",
        "\n",
        "print(X_train.shape, y_train.shape)\n",
        "print(X_test.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mwNYaLzC-4sl"
      },
      "source": [
        "## 결측치 처리"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vdQtWE3k-4sl"
      },
      "source": [
        "X_train.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FBA0AQ2Y-4sl"
      },
      "source": [
        "X_test.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qQaKi0v_S8iB"
      },
      "source": [
        "## Train-Test 데이터셋 분할"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_jLAl_hFm7ZE"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_tr, X_val, y_tr, y_val =  train_test_split(X_train, y_train, test_size=0.2, stratify=y_train, random_state=2021)\n",
        "\n",
        "print(\"훈련 데이터셋: \", X_tr.shape, y_tr.shape)\n",
        "print(\"검증 데이터셋: \", X_val.shape, y_val.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RrjmxAEo-4sl"
      },
      "source": [
        "X_train.isnull().sum().sum(), X_test.isnull().sum().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dvivsdkj-4sl"
      },
      "source": [
        "## 분류 알고리즘 선택"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7RXnBOvT-4sl"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "model = RandomForestClassifier(random_state=2021)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uG30obEw-4sm"
      },
      "source": [
        "## 모델 학습"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_QniViRi-4sm"
      },
      "source": [
        "model.fit(X_tr, y_tr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iABSYbga-4sn"
      },
      "source": [
        "## 모델 예측"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zwDf_2u6-4sn"
      },
      "source": [
        "val_pred = model.predict(X_val)\n",
        "val_pred[:10]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WaZbNefT-4sn"
      },
      "source": [
        "y_val[:10].to_list()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-33wqhGM-4sn"
      },
      "source": [
        "## 성능 평가"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_vMpt9Ka-4sn"
      },
      "source": [
        "성능 평가 지표는 **f1 score**를 사용하였습니다.  \n",
        "f1 score는 Precision과 Recall의 조화평균으로 주로 **분류 클래스 간의 데이터가 불균형이 심각할때 사용**합니다.  \n",
        "<img src='https://t1.daumcdn.net/cfile/tistory/99DC064C5BE056CE10' width=50%>\n",
        "<img src='https://miro.medium.com/max/700/1*3KDYxZCMmGbUDtmQdnYhmw.jpeg' width=50%>\n",
        "<img src='https://miro.medium.com/max/1400/1*A0Lu2dZfWsCMqWlhw1ZNfQ.png' width=70%>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YTOhUBpn-4sn"
      },
      "source": [
        "# Confusion Matrix\n",
        "from sklearn.metrics import confusion_matrix \n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "plot_confusion_matrix(model, X_val, y_val,\n",
        "                      values_format='d', cmap='cividis', \n",
        "                      display_labels=[\"1\", \"0\"])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s6-RQuPL-4sn"
      },
      "source": [
        "# 평가 지표 - Accuracy\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xeugKycM-4sn"
      },
      "source": [
        "# 평가 지표 - Precision\n",
        "from sklearn.metrics import precision_score\n",
        "\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kdFcLpxj-4so"
      },
      "source": [
        "# 평가 지표 - Recall\n",
        "from sklearn.metrics import recall_score\n",
        "\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vWY8P0vU-4so"
      },
      "source": [
        "# 평가 지표 - F1 score\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mEX1CrXc-4so"
      },
      "source": [
        "# 평가 지표 - ROC AUC\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-KKGCyhe-4so"
      },
      "source": [
        "## Submission 파일 만들기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XSbXvjQG-4so"
      },
      "source": [
        "submission = pd.read_csv('/content/MyDrive/MyDrive/DB/DB_CNA6_실습파일/membership/sample_submission.csv')\n",
        "submission"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6nQE_Gf1-4so"
      },
      "source": [
        "preds = model.predict(X_test)\n",
        "submission['MEMBERSHIP_STATUS'] = preds\n",
        "submission"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QqJPcugW-4so"
      },
      "source": [
        "submission['MEMBERSHIP_STATUS'].value_counts() / submission.shape[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "snFdFnvd-4sp"
      },
      "source": [
        "submission.to_csv('prediction_001.csv', index=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DvntJJZD-4sp"
      },
      "source": [
        "# Feature Engineering"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nmvTJLwX-4sp"
      },
      "source": [
        "## Feature Importance "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BxIui6Ff-4sp"
      },
      "source": [
        "feature_names = X_train.columns\n",
        "feature_names"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oc6YPzeE-4sp"
      },
      "source": [
        "importances = model.feature_importances_\n",
        "importances"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qNQ4T2Wc-4sp"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=feature_names, y=importances, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v7gUpJYp-4sp"
      },
      "source": [
        "## Feature Scaling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FFqqw90x-4sp"
      },
      "source": [
        "X_train.describe()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mlv6ZCpF-4sp"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "X_train_scaled = X_train.copy()\n",
        "\n",
        "scaler.fit(X_train)\n",
        "X_train_scaled.loc[:, :] = scaler.transform(X_train)\n",
        "\n",
        "X_train_scaled.head(2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5AtkOSCD-4sq"
      },
      "source": [
        "X_test_scaled = X_test.copy()\n",
        "X_test_scaled.loc[:, :] = scaler.transform(X_test)\n",
        "\n",
        "X_test_scaled.head(2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AS4xyw3R-4sq"
      },
      "source": [
        "X_tr, X_val, y_tr, y_val =  train_test_split(X_train_scaled, y_train, test_size=0.2, stratify=y_train, random_state=2021)\n",
        "\n",
        "print(\"훈련 데이터셋: \", X_tr.shape, y_tr.shape)\n",
        "print(\"검증 데이터셋: \", X_val.shape, y_val.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YjlpMxkl-4sq"
      },
      "source": [
        "model = RandomForestClassifier(random_state=2021)\n",
        "model.fit(X_tr, y_tr)\n",
        "val_pred = model.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W7vicwFx-4sq"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ZhGjPK7-4sq"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train.columns, y=model.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bcLs4gON-4sq"
      },
      "source": [
        "preds = model.predict(X_test_scaled)\n",
        "submission['MEMBERSHIP_STATUS'] = preds\n",
        "submission.to_csv('prediction_002.csv', index=False)\n",
        "submission"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OOCjUWkJ-4sr"
      },
      "source": [
        "submission['MEMBERSHIP_STATUS'].value_counts() / submission.shape[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9eZpV6FY-4sr"
      },
      "source": [
        "# 모델 성능 개선하기"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LDFPSd03-4sr"
      },
      "source": [
        "## 변수 선택 \n",
        "Feature Importance 분석에 따라, 가장 낮는 married, job 열을 제외하고 분석"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K37FNRD6-4sr"
      },
      "source": [
        "X_train_scaled.head(2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a61f3Mbu-4sr"
      },
      "source": [
        "X_train_scaled.columns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cTeYEneu-4sr"
      },
      "source": [
        "selected_features = ['term', 'fee', 'income', 'age', 'family']\n",
        "X_train_scaled = X_train_scaled.loc[:, selected_features]\n",
        "X_test_scaled = X_test_scaled.loc[:, selected_features]\n",
        "\n",
        "X_tr, X_val, y_tr, y_val =  train_test_split(X_train_scaled, y_train, test_size=0.2, random_state=2021)\n",
        "print(\"훈련 데이터셋: \", X_tr.shape, y_tr.shape)\n",
        "print(\"검증 데이터셋: \", X_val.shape, y_val.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cW5fKfOj-4sr"
      },
      "source": [
        "model = RandomForestClassifier(random_state=2021)\n",
        "model.fit(X_tr, y_tr)\n",
        "val_pred = model.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aR0bXh6b-4sr"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RPYqumgd-4ss"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train_scaled.columns, y=model.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_I5VNcUa-4ss"
      },
      "source": [
        "## 모델 파라미터 변경"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VREEmKmP-4ss"
      },
      "source": [
        "model = RandomForestClassifier(n_estimators=300, class_weight='balanced', random_state=2021)\n",
        "model.fit(X_tr, y_tr)\n",
        "val_pred = model.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sGtjWJRf-4ss"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9YXclEuW-4ss"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train_scaled.columns, y=model.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o_gr2Exm-4ss"
      },
      "source": [
        "## SMOTE 업샘플링"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lhuVEriJ-4st"
      },
      "source": [
        "# !pip install imblearn"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R8VLp01P-4st"
      },
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "smote = SMOTE()\n",
        "len_train = len(X_train)\n",
        "X_tr_smote, y_tr_smote = smote.fit_resample(X_tr, y_tr)\n",
        "\n",
        "X_tr_smote.shape, X_tr.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vd1LiSqp-4st"
      },
      "source": [
        "model = RandomForestClassifier(n_estimators=300, class_weight='balanced', random_state=2021)\n",
        "model.fit(X_tr_smote, y_tr_smote)\n",
        "val_pred = model.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5MXZQswW-4st"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4mTLTYAw-4st"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train_scaled.columns, y=model.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T85uhZBy-4st"
      },
      "source": [
        "## One-Hot Encoding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8HOgeyHW-4st"
      },
      "source": [
        "# Vehicle_Damage \n",
        "pd.get_dummies(X_train, columns = ['married'], drop_first=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IP_9RbW4-4st"
      },
      "source": [
        "X_data = X_train.append(X_test)\n",
        "X_data = pd.get_dummies(X_data, columns = ['married', 'job'], drop_first=True)\n",
        "X_data.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "adDV7YsV-4su"
      },
      "source": [
        "X_train = X_data.iloc[:len(X_train)]\n",
        "X_test = X_data.iloc[len(X_train):]\n",
        "X_test"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X3qVQOwL-4su"
      },
      "source": [
        "# stratify\n",
        "X_tr, X_val, y_tr, y_val =  train_test_split(X_train, y_train, test_size=0.2, stratify=y_train, random_state=2021)\n",
        "print(\"훈련 데이터셋: \", X_tr.shape, y_tr.shape)\n",
        "print(\"검증 데이터셋: \", X_val.shape, y_val.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LseyDhec-4su"
      },
      "source": [
        "model = RandomForestClassifier(n_estimators=300, class_weight='balanced', random_state=2021)\n",
        "model.fit(X_tr, y_tr)\n",
        "val_pred = model.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ygEzwvc_-4su"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JHIEA0Rv-4su"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train.columns, y=model.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0C7xUDZl-4su"
      },
      "source": [
        "# 다른 알고리즘 적용"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HLi4cw2M-4su"
      },
      "source": [
        "### XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fnOFCAjx-4sv"
      },
      "source": [
        "import xgboost as xgb\n",
        "\n",
        "model2 = xgb.XGBClassifier(n_estimators=300, scale_pos_weight=10, random_state=2021)  # scale_pos_weight = total_majority_examples / total_minority_examples\n",
        "model2.fit(X_tr, y_tr)\n",
        "val_pred2 = model2.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tElRC1QR-4sv"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred2))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred2))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred2))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred2))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J7Y8DMg_-4sv"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train.columns, y=model2.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1xWHik_R-4sv"
      },
      "source": [
        "### LightGBM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xbMtOp_D-4sv"
      },
      "source": [
        "import lightgbm as lgb\n",
        "model3 = lgb.LGBMClassifier(n_estimators=300, scale_pos_weight=10, random_state=2021)\n",
        "model3.fit(X_tr, y_tr)\n",
        "val_pred3 = model3.predict(X_val)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kjLeWeL9-4sv"
      },
      "source": [
        "# 평가 지표\n",
        "print(\"정확도: %0.2f\" % accuracy_score(y_val, val_pred3))\n",
        "print(\"정밀도: %0.2f\" % precision_score(y_val, val_pred3))\n",
        "print(\"재현율: %0.2f\" % recall_score(y_val, val_pred3))\n",
        "print(\"F1 스코어: %0.2f\" % f1_score(y_val, val_pred3))\n",
        "print(\"ROC AUC: %0.2f\" % roc_auc_score(y_val, val_pred3))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ybs7auv9-4sw"
      },
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "sns.barplot(x=X_train.columns, y=model3.feature_importances_, estimator=np.mean)\n",
        "plt.title(\"Feature importances\")\n",
        "plt.ylabel(\"Mean decrease in impurity\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mo0D-eN0-4sw"
      },
      "source": [
        "# K-fold 교차검증"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "ExecuteTime": {
          "end_time": "2021-09-14T07:32:20.993530Z",
          "start_time": "2021-09-14T07:32:20.990824Z"
        },
        "id": "_ZEaGped-4sw"
      },
      "source": [
        "from sklearn.model_selection import StratifiedKFold\n",
        "\n",
        "cv_score = []\n",
        "cv_model = lgb.LGBMClassifier(n_estimators=300, scale_pos_weight=10, random_state=2021)\n",
        "\n",
        "idx_iter = 0\n",
        "for train_idx , valid_idx in StratifiedKFold(n_splits=5, random_state=42, shuffle=True).split(X_train, y_train):  \n",
        "\n",
        "    X_tr, X_val = X_train.iloc[train_idx], X_train.iloc[valid_idx]\n",
        "    y_tr, y_val = y_train.iloc[train_idx], y_train.iloc[valid_idx]\n",
        "\n",
        "    #학습 및 예측 \n",
        "    cv_model.fit(X_tr , y_tr)    \n",
        "    y_pred = cv_model.predict(X_val)\n",
        "\n",
        "    # 반복 시 마다 정확도 측정 \n",
        "    idx_iter += 1\n",
        "    score = f1_score(y_val, y_pred)\n",
        "\n",
        "    print(f\"{idx_iter}번째 Valid Fold의 F1 Score: {score}\")\n",
        "\n",
        "    cv_score.append(score)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "ExecuteTime": {
          "end_time": "2021-09-14T07:34:03.991737Z",
          "start_time": "2021-09-14T07:32:43.773834Z"
        },
        "id": "UuUqEw8y-4sw"
      },
      "source": [
        "# 평균 스코어\n",
        "np.mean(cv_score)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7af674be-b9e7-45ad-b5fd-91b0371ff631"
      },
      "source": [
        "# [실습]\n",
        "고객 이탈 여부를 예측하는 모델을 훈련시키고 예측 결과를 시스템에 제출합니다. (합격 점수: F1스코어 0.52 이상)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "umcAJjQEv9fc"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}