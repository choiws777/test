# -*- coding: utf-8 -*-
"""CNA6_day1_WSChoi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qlUnwRO5Pnj4H1Oe3zASUvVSoC8D5aHH

---

# <center>파이썬 복습</center>

---

# 파이썬 시작하기

## 0. 사칙연산 - 구글 코랩으로 파이썬 코드 실행하기
"""

12/2

5 %2

"""## 1. print 명령을 활용하여, 화면에 "DB CNA 6기" 라는 문자열을 출력합니다."""

print('DB CNA 6기')

"""## 2. print 명령을 활용하여, 1부터 5까지 자연수를 화면에 출력합니다. """

print(1, 2, 34, 5)

"""# 파이썬을 활용한 데이터 분석?  
엑셀 파일(netflix_titles.xlsx)을 구글 코랩 폴더에 업로드합니다
"""

# 라이브러리 활용
import pandas as pd

넥플릭스테스트 = pd.read_excel('/content/netflix_titles.xlsx')

넥플릭스테스트

# 데이터 저장
data = pd.read_excel("netflix_titles.xlsx")

# 연도별 등록 컨텐츠 수량을 시각화
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(18, 4))
sns.countplot(x='type', data=data)
plt.xticks(rotation=90)
plt.show()

"""# Variable (변수)

## 변수에 값을 저장
- 형식: 변수이름 = 저장하려는 값

숫자 1을 변수 a에 저장합니다.
"""

a=1

"""변수 a를 출력하여 저장된 값을 확인합니다."""

a

"""print 명령을 사용하여 변수 a를 출력합니다. 저장된 값이 화면에 표시됩니다."""

print(a)

"""변수 b에 숫자 5를 저장합니다."""

b=5

"""변수 a와 b를 더합니다. 이처럼 두 변수를 더하면, 각 변수가 가지고 있는 값들을 더하게 됩니다. """

a + b

"""## [Quiz] 
변수 data에 저장되어 있는 데이터를 화면에 출력합니다. 
"""

print(a)

print(b)

print(넥플릭스테스트)

"""# Data Type (자료형)

## 숫자형
- 정수형(int) : 소수점이 없음. 예: -3, -2, -1, -, 1, 2, 3
- 실수형(float)  : 소수점이 있는 숫자

### 정수형

- 정수 7을 입력합니다.
"""

7

"""- type 함수로 자료형을 확인합니다"""

type(7)

"""- 숫자 10을 변수 a에 저장합니다."""

a = 10

"""- 변수 a의 자료형을 확인합니다."""

type(a)

"""### 실수형

- 변수 b에 숫자 3.14를 저장합니다.
"""

b = 3.14

print(b)

"""- type 함수로 자료형을 확인합니다."""

type(b)

"""- 정수형 값(10) 과 실수형 값(3.14)을 더하면?"""

10 + 3.14

"""### [Quiz] 
정수를 저장하고 있는 변수(a) 과 실수를 저장하고 있는 변수(b)을 더하면?
"""





"""### [예시]  
작품의 출시연도는 정수형으로 저장....
"""

넥플릭스테스트

넥플릭스테스트['release_year']

data

"""### 자료형 변환"""

int(3.12)

# 3.14를 정수형으로 변환하고 변수 a1에 저장
a1 = int(3.14)

# 변수 a1의 자료형 확인 
type(a1)

# 변수 a1의 값을 실수로 변환하고 변수 a2에 저장
a2 = float(a1)

# 변수 a2의 자료형 확인 
type(a2)

"""## 문자열

### 문자열 만들기

- 큰 따옴표
"""

# 파이썬
"파이썬"

c = "파이썬"

c

"""- 작은 따옴표"""

# 프로그래밍
d = '프로그래밍'

d

"""### [예시]"""

data['country']

"""- 문자열을 숫자형으로 변환"""

# 문자열 '2021'을 변수에 저장 
year = '2021'

type(year)

# 변수를 정수형으로 변환하고, 다른 변수에 저장
num = int(year)

type(num)

# 정수형 변환 결과를 저장하고 있는 변수를 출력
print(num)

"""- 숫자형을 문자열로 변환"""

_str = str(num)
print(_str)

print(type(_str))

"""- 변수 _str에 5를 곱합니다"""

_str*5

# "-" 문자열에 20을 곱합니다
# "*" 문자열에 20을 곱합니다
print('-'*20)
print("*"*20)

"""### [예시]  
2 시즌 이상 연재된 작품을 선택하려면...
"""

data['duration']

# 정규식
import re

int(re.findall(r'(\d+) [A-Za-z]+', data['duration'][0])[0])

data['duration'].apply(lambda x: int(re.findall(r'(\d+) [A-Za-z]+', x)[0]))

data['duration'].apply(lambda x: re.findall(r'\d+ ([A-Za-z]+)', x)[0])

"""### 문자열 포매팅"""

# 문자열 포매팅 1
"DB{}인재개발원".format(" ")

text = "인재"
"DB {}개발원".format(text)

# 문자열 포매팅 2
"DB %s개발원" % text

# 문자열 포매팅 3
f"DB {text}개발원"

pi = 3.141592
print("원주율: %0.4f" % pi)

print("매출액: {:,}".format(300000000))

"""- 2개 이상의 문자열을 추가하고 싶을 때"""

# 문자열 포매팅 1
"{}정책{}2021".format("친환경", " ")

# 문자열 포매팅 2
"%s정책%s2021" % ("친환경", " ")

"""### 문자열의 길이(원소의 개수)"""

string = "Green policy"
len(string)

data

db = "dbgroup"

type(db[2])

"""### 인덱싱(indexing)
문자열에 속하는 문자의 순서(index)를 지정하여 원소를 추출
"""

string[0]

string[1]

string[-1]

"""### [Quiz] 
뒤에서 두 번째 문자를 추출하세요. 
"""





"""### 슬라이싱 (slicing)
문자의 순서(index)를 범위로 지정하여 여러 원소를 함께 추출 
"""

db

db[0]

string[0:]

string[:3]

string[4:]

string[:]

"""### [Quiz] 
다음 문자열에서 숫자를 추출하고, 정수형으로 변환합니다. 
"""

data

data['title'][3]

int(data['title'][3])

data['duration'][0]

data['duration'][0][0]
type(data['duration'][0][0])

int(data['duration'][0][0])
type(int(data['duration'][0][0]))

"""# Operator (연산자)

## 산술 연산자

- (+) 연산자 : 덧셈
"""

3 + 2

"""- (-) 연산자 : 뺄셈"""

3 - 2

"""- (*) 연산자 : 곱셈"""

3 * 2

"""- (/) 연산자 : 나눗셈"""

3 / 2

"""- (**) 연산자 : 거듭제곱"""

3 ** 2

"""- (%) 연산자 : 나머지"""

3 % 2

"""- (//) 연산자 : 몫"""

3 // 2

"""### [Quiz] 
3과 7을 더한 값에 10을 곱합니다.
"""





"""## 비교 연산자

- A > B : A가 B보다 크다
"""

3 > 2

"""- A < B : A가 B보다 작다"""

3 < 2

"""- A >= B  : A가 B보다 크거나 같다"""

3 >= 2

"""- A <= B  : A가 B보다 작거나 같다"""

3 <= 2

"""- A == B   : A와 B가 같다"""

3 == 2

"""- A != B   : A와 B가 다르다"""

3 != 2

"""- [참고] if 조건문"""

score = 80

if score > 80:
    print("합격입니다")
    
else:
    print("재응시 대상자입니다")

"""## 논리 연산자

- not A
"""

not True

not False

"""- A and B   """

True and True

True and False

False and False

"""- A & B (비트 연산자) : True(1), False(0)"""

(2 > 1) & (1 > 2)

(2 > 1) & (1 > 2)

(1 != 1) & (1 == 2)

"""- A or B   """

True or True

True or False

False or False

"""- A or B (비트 연산자) : True(1), False(0)"""

(2 > 1) || (1 > 2)

(2 > 1) | (1 > 2)

(1 != 1) | (1 == 2)

"""- [참고] if 조건문"""

score = 80
attendance = 0.8

if (score > 80) and (attendance>=0.8):
    print("합격입니다")
    
else:
    print("재응시 대상자입니다")

"""# 집합 형태의 자료형

## 리스트(List)

- 리스트 만들기: 대괄호 안에 쉼표(,)를 사용하여 원소들을 구분
"""

a = [4, 2, 1, 3, 5]

a

a[-3]

x = (1, 2)

x

type(x)

type(a)

"""- 리스트 길이 구하기"""

len(넥플릭스테스트)

len(data['cast'])

"""- [참고] for 반복문"""

for c in [4, 2, 1, 3, 5]:
    print(c)

"""- 리스트 인덱싱"""

# a의 첫번째 원소
a[0]

# a의 마지막 원소
a[-1]

"""- 리스트 슬라이싱"""

# a의 인덱스 범위 0 ~ 2 원소를 슬라이싱 추출
a[0:2]

"""- 리스트 값 변경하기"""

a[2] = 10

a

a[0:2] = [40, 20]

a

"""### [Quiz] 리스트의 첫 번째 원소를 'Y2020'으로 변경하세요."""

years = list(data['release_year'].unique())
print(years)

years[0] = 'Y2020'
print(years)



"""- 리스트 덧셈 연산자 적용"""

[1, 2] + ["파이썬"]

"""- 리스트 원소 추가"""

a.append(100)

a

"""- 논리 연산"""

1 in a

1 not in a

"""## 2. 투플(Tuple)

- 투플 만들기
"""

ta = (4, 2, 1, 3, 5)

ta

"""- 투플 인덱싱"""

ta[0]

"""- 투플 슬라이싱"""

ta[0:2]

"""## 3. 딕셔너리(Dictionary)

- 딕셔너리 만들기
"""

da = {"team":"두산베어스", "position":"내야수", "타율":0.324}

da['team']

da['team']

"""- 자료형 확인"""

data

type(data['title'])

type(da)

"""- key 값으로 value 가져오기"""

da["position"]

da["타율"]



"""- 새로운 원소 추가"""

# key : value
da['city'] = '서울'

"""- 원소 변경"""

da["city"]

da["city"] = "잠실"

"""- key 값 배열"""

da.keys()

"""- [참고] for 반복문"""

for key in da.keys():
    print(key)

for key in da.keys():
    print(da[key])

"""- value 값 배열"""

da.values()

"""- (key, value) 투플 배열"""

a = da.items()
a

a = list(a)
a

a[0][1]

"""# Function (함수)

## 사용자 함수

- def 예약어를 사용하여 2개의 숫자를 더하는 사용자 정의 함수 만들기
"""

def add(x, y): 
    return x + y

add(1, 2)

c = add(2, 3)
c

"""- 매개변수, return 없는 사용자 정의 함수"""

def my_name():
    print("내 이름은 ooo입니다.")

my_name()

myname = my_name()
print(myname)

"""- [Quiz] 2개의 숫자를 입력 받아서, 뺄셈을 처리하는 함수를 만들기"""



"""## 내장 함수

- 범위에 들어가는 숫자 배열 만들기
"""

data = range(1, 10, 1)
data

# 리스트로 변환
data = list(data)
data

"""- 최대값, 최소값, 합계"""

max(data)

min(data)

sum(data)

"""- 반올림"""

round(3.14)

round(3.14, 1)

"""### 문자열 처리 함수

- 문자열 키보드 입력
"""

name = input("사용자 이름을 입력하세요: ")

name

len(name)

"""- 소문자로 변환"""

name.lower()

"""- 대문자로 변환"""

name.upper()

"""- 문자열에서 해당 문자의 첫번째 인덱스 값 구하기 (상대적 위치)"""

name.find('us')

name.find('s')

"""- 문자열 치환"""

name.replace('r', 'rs')

"""- 공백 제거"""

text = "      DB  "

text.lstrip()

text.rstrip()

text.strip()

"""- 문자열 분리"""

text = "대한 민국, 서울"

text.split()

text.split(",")

"""# <center>멤버십 고객 탈회 예측</center>

컬럼 | 설명 | 컬럼 | 설명
---|---|---|---
id | 멤버십 번호 | MEMBERSHIP_TERM_YEARS | 멤버십 기간
ANNUAL_FEES | 연간 회비 | MEMBER_MARITAL_STATUS | 기혼 여부, M(기혼), S(미혼)
MEMBER_GENDER | 성별, M(남),F(여) | MEMBER_ANNUAL_INCOME | 연봉(연간 수입)
MEMBER_OCCUPATION_CD | 직업 | MEMBERSHIP_PACKAGE | 멤버십 유형
MEMBER_AGE_AT_ISSUE | 나이 | ADDITIONAL_MEMBERS | 가족 회원
PAYMENT_MODE | 지불 방식 | AGENT_CODE | 직원 코드 
START_DATE (YYYYMMDD) | 시작 날짜 | END_DATE  (YYYYMMDD) | 종료 날짜 
MEMBERSHIP_STATUS | 0(유지), 1(탈회) |

# Library
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings(action='ignore')

sns.__version__



"""# Load Dataset"""

df = pd.read_excel('/content/membership.xlsx')

df

df.T

df = pd.read_excel('membership.xlsx')
df.head(2)

df

"""# 판다스 자료구조

## DataFrame
"""

# 자료형 확인
type(df)

# 크기, 형태
df.shape

# 기본 정보
df.info

df.info()

df.frame()

"""## Series

### 데이터프레임의 열(column) : 시리즈
"""

# df['변수이름']

df['MEMBER_AGE_AT_ISSUE']

df['MEMBER_AGE_AT_ISSUE'] / 1000

df.loc[   0:10  ,  'MEMBER_AGE_AT_ISSUE']

df.iloc[   0:10  ,  1:10]

# 크기, 형태
df['MEMBER_AGE_AT_ISSUE'].shape

# 인덱스 배열
df['MEMBER_AGE_AT_ISSUE'].index



# 값 (데이터)
df['MEMBER_AGE_AT_ISSUE'].values

"""## 시리즈 연산"""



# 산술 연산 1 

df['ANNUAL_FEES'] / 1000

# 산술 연산 2

df['ANNUAL_FEES'] / (df['ADDITIONAL_MEMBERS'] + 1)

df

# 고유값의 개수 (분포)

df['MEMBER_GENDER'].shape[0]

# 고유값의 개수 (분포)

df['MEMBER_GENDER'].value_counts()

# 고유값의 구성비 

df['MEMBER_GENDER'].value_counts() / df['MEMBER_GENDER'].shape[0]

sns.countplot(x='MEMBER_GENDER', data=df)

df.shape[0]

df.columns

sns.countplot(x='MEMBERSHIP_PACKAGE', data=df)

"""### 열 선택"""

df['MEMBER_GENDER']

df.loc[:, 'MEMBER_GENDER']

df.loc[8000:, 'MEMBER_GENDER']

df.head(2)

df.loc[:, 'MEMBER_GENDER':'MEMBER_OCCUPATION_CD']

df.loc[:, ['MEMBER_GENDER', 'MEMBER_OCCUPATION_CD']]

"""## Quiz  
df 데이터프레임에서 MEMBERSHIP_TERM_YEARS, MEMBER_AGE_AT_ISSUE, ANNUAL_FEES 열을 선택하여, df_train이라는 새로운 데이터프레임으로 저장합니다.  
"""

df.head(2)

df.loc[:, ['MEMBERSHIP_TERM_YEARS', 'MEMBER_AGE_AT_ISSUE', 'ANNUAL_FEES']]

df_train= df.loc[:, ['MEMBERSHIP_TERM_YEARS', 'MEMBER_AGE_AT_ISSUE', 'ANNUAL_FEES']]
df_train
df_train.head(5)

df_train

df.tail(3)

df.iloc[  :   ,  0:4    ]

df.iloc[ 1:3   ,  [1,2]    ]

"""### 열이름 속성"""

df.columns

"""## Quiz  
df_train 데이터프레임을 구성하는 열 이름의 배열을 추출하고, 각 열의 평균값을 구하여 dictionary 형태로 정리합니다.  
"""







"""### 행 선택"""

features = ['MEMBERSHIP_TERM_YEARS', 'MEMBER_AGE_AT_ISSUE', 'ANNUAL_FEES']
df_train = df.loc[:, features]

df_train.loc[1, :]

df_train.loc[1:2, :]

"""### 행, 열 슬라이싱 - 데이터프레임 추출"""

df_train.loc[1:2, 'MEMBER_AGE_AT_ISSUE':'ANNUAL_FEES']

"""# 통계 기초/시각화"""

df.mean()

# 평균
df['MEMBER_AGE_AT_ISSUE'].mean()

# 최대값
df['MEMBER_AGE_AT_ISSUE'].max()

# 최소값
df['MEMBER_AGE_AT_ISSUE'].min()

# 중간값
df['MEMBER_AGE_AT_ISSUE'].median()

# 표준편차
df['MEMBER_AGE_AT_ISSUE'].std()

# 통계 요약
df.describe()

"""## Pandas 시각화"""

df['MEMBERSHIP_STATUS'].unique()

df['MEMBERSHIP_STATUS'].value_counts()

df['MEMBERSHIP_STATUS'].value_counts().plot(kind='barh')

sns.countplotdf['MEMBERSHIP_STATUS']

df['MEMBERSHIP_TERM_YEARS'].plot(kind='hist')

df['MEMBERSHIP_TERM_YEARS'].plot(kind='box')

df['MEMBERSHIP_TERM_YEARS'].plot(kind='kde')

df.hist(figsize=(5, 5))

"""# 여러 개의 그래프를 동시에 표시 - subplot 사용법"""

# MATLAB 스타일

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)      # 세로 개수, 가로 개수, 차트 순서
df['MEMBERSHIP_TERM_YEARS'].plot(kind='box')

plt.subplot(1, 2, 2)
df['MEMBERSHIP_TERM_YEARS'].plot(kind='hist')

plt.show()

# 객체지향 스타일

fig, ax = plt.subplots(3, 2, figsize=(8, 4)) 

df['MEMBERSHIP_TERM_YEARS'].plot(kind='box', ax=ax[0, 0])
df['MEMBERSHIP_TERM_YEARS'].plot(kind='hist', ax=ax[0, 1])

plt.show()

"""# Seaborn 시각화"""

df.head(2)

"""## 범주형 변수의 수량을 시각화"""

categorical_cols = ['MEMBER_MARITAL_STATUS', 'MEMBER_GENDER', 
                    'MEMBERSHIP_PACKAGE', 'MEMBER_OCCUPATION_CD', 
                    'PAYMENT_MODE', 'AGENT_CODE', 'MEMBERSHIP_STATUS',
                   ]

"""### Count Plot  """

df['MEMBER_OCCUPATION_CD'].unique()

df['MEMBERSHIP_STATUS'].nunique()

df['MEMBERSHIP_STATUS'].value_counts()

sns.countplot(x='MEMBERSHIP_STATUS', data=df);

sns.countplot(x='MEMBERSHIP_STATUS', data=df);

sns.countplot(x='MEMBERSHIP_STATUS', hue='MEMBER_MARITAL_STAS', data=df);

sns.countplot(x='MEMBERSHIP_STATUS', hue='PAYMENT_MODE', data=df);

sns.countplot(y='MEMBER_MARITAL_STATUS', hue='PAYMENT_MODE', data=df);

"""## Quiz  
다른 범주형 변수를 찾아서, countplot으로 데이터의 수량을 시각화합니다. 
"""

categorical_cols

sns.countplot(x='MEMBERSHIP_STATUS' , data=df);

sns.countplot(x='MEMBERSHIP_STATUS', hue='PAYMENT_MODE', data=df);

value.counts()



"""## 연속형 변수의 분포를 시각화"""

numeric_cols = ['MEMBERSHIP_TERM_YEARS','ANNUAL_FEES','MEMBER_ANNUAL_INCOME',
                'MEMBER_AGE_AT_ISSUE','ADDITIONAL_MEMBERS',
                'START_DATE (YYYYMMDD)','END_DATE  (YYYYMMDD)']

"""### Distribution Plot"""

sns.displot(x='MEMBER_AGE_AT_ISSUE', data=df);

sns.displot(x='MEMBER_AGE_AT_ISSUE', kind='hist' ,  data=df, bins=10);

sns.displot(x='MEMBER_AGE_AT_ISSUE', kind='kde', data=df);

sns.displot(x='MEMBER_AGE_AT_ISSUE', kind='kde', data=df, bw_adjust=0.3);

sns.displot(x='MEMBER_AGE_AT_ISSUE', hue='MEMBERSHIP_STATUS', data=df, bins=100);

sns.displot(x='MEMBER_AGE_AT_ISSUE', hue='MEMBERSHIP_STATUS', kind='kde', data=df,bw_adjust=0.3);

sns.displot(x='MEMBER_AGE_AT_ISSUE', hue='MEMBERSHIP_STATUS', kind='kde' ,fill='true', data=df, bw_adjust=0.3);

sns.displot(row='MEMBER_GENDER', col='MEMBERSHIP_PACKAGE', x='START_DATE', hue='MEMBERSHIP_STATUS', kind='hist', data=df);

sns.displot(row='MEMBER_GENDER',
            col='MEMBERSHIP_PACKAGE', 
            x='START_DATE',
            hue='MEMBERSHIP_STATUS', 
            kind='kde', 
            fill='true', 
            data=df, 
            bw_adjust=0.1);

"""## Box Plot"""

df['MEMBERSHIP_STATUS'].value_counts()

sns.boxplot(x='MEMBERSHIP_TERM_YEARS', data=df, palette='Accent');

sns.boxplot(x='MEMBERSHIP_STATUS', y='MEMBERSHIP_TERM_YEARS', data=df, palette="PRGn");

sns.boxplot(x='MEMBERSHIP_STATUS', y='MEMBERSHIP_TERM_YEARS', hue="MEMBERSHIP_STATUS", data=df, palette="PRGn")

plt.legend(loc="upper right")
plt.show()

"""## Violin Plot"""

sns.violinplot(x='PAYMENT_MODE', y='ANNUAL_FEES', hue="MEMBERSHIP_STATUS", data=df, palette="PRGn")
plt.legend(loc="upper right")
plt.show()

"""## Strip Plot"""

sns.stripplot(x='MEMBER_GENDER', y='ANNUAL_FEES', hue="MEMBERSHIP_STATUS", data=df, palette="PRGn")
plt.legend(loc="upper right")
plt.show()

"""## Bar Plot"""

sns.barplot(x='MEMBER_OCCUPATION_CD', y='MEMBERSHIP_TERM_YEARS', data=df);

# 데이터 정렬

sorted_index = df.loc[:, ['MEMBER_OCCUPATION_CD', 'MEMBERSHIP_TERM_YEARS']].groupby('MEMBER_OCCUPATION_CD').mean().sort_values(by='MEMBERSHIP_TERM_YEARS', ascending=False).index
sorted_index

sns.barplot(x='MEMBER_OCCUPATION_CD', y='MEMBERSHIP_TERM_YEARS', data=df, order=sorted_index);

sns.barplot(x='MEMBER_OCCUPATION_CD', y='MEMBERSHIP_TERM_YEARS', hue='MEMBERSHIP_STATUS', data=df);

"""## Scatter Plot"""

sns.scatterplot(x='MEMBERSHIP_TERM_YEARS', y='ANNUAL_FEES', data=df)
plt.show()

"""## LM Plot"""

sns.lmplot(x='MEMBER_ANNUAL_INCOME', y='ANNUAL_FEES', data=df)
plt.show()

"""## KDE Plot"""

sns.kdeplot(x='MEMBERSHIP_TERM_YEARS', y='ANNUAL_FEES', data=df);

"""## Joint Plot"""

sns.jointplot(x='MEMBERSHIP_TERM_YEARS', y='ANNUAL_FEES', data=df)

"""# 데이터 전처리2 
 
- 필터링, 정제, 변환

### 행 필터 (불린 인덱싱)
"""

df['MEMBER_GENDER']  == 'm'

df['MEMBER_GENDER'] == "M"

df.loc[ df['MEMBER_GENDER'] != "M"  ,  : ]

df.loc[ df['MEMBER_GENDER'] != "M"  ,  ['MEMBER_GENDER'] ]

df.loc[df["MEMBER_AGE_AT_ISSUE"] > 50, :]

# AND 연산
(df['MEMBER_GENDER'] == "M") & (df["MEMBER_AGE_AT_ISSUE"] > 50)

df.loc[(df['MEMBER_GENDER'] == "M") & (df["MEMBER_AGE_AT_ISSUE"] > 50)]

(df['MEMBER_GENDER'] == "M") | (df["MEMBER_AGE_AT_ISSUE"] > 50)

df.loc[(df['MEMBER_GENDER'] == "M") | (df["MEMBER_AGE_AT_ISSUE"] > 50) , :]

"""## Quiz  
데이터프레임에서, 20대 기혼인(숫자1) 고객 데이터를 추출합니다.  
reset_index 명령을 사용하여 행 인덱스를 초기화하고, 새로운 데이터프레임의 크기(행, 열)를 출력합니다.  
"""

df.head(0)

df

df.loc[(df['MEMBER_OCCUPATION_CD'] == 1)  , :]

(df['MEMBER_MARITAL_STATUS'] == 1) & ((df["MEMBER_AGE_AT_ISSUE"] >= 20) &  df["MEMBER_AGE_AT_ISSUE"] < 30)

df.loc[(df['MEMBER_MARITAL_STATUS'] == 1) & ((df["MEMBER_AGE_AT_ISSUE"] >= 20) &  (df["MEMBER_AGE_AT_ISSUE"] < 30)) , :]

"""### 결측값 제거"""

df.isnull()

df.isnull(). sum()

df.loc[5:20, 'MEMBER_GENDER'] = np.nan

df.isnull(). sum()

df[0 : 10]

df.head(10)

df.isnull(). head(10)

df.isnull(). sum()

df.notnull(). sum()

df.dropna()

df['MEMBER_GENDER'].dropna()



df['MEMBER_GENDER'].dropna().shape

df['MEMBER_GENDER'].shape

"""### 결측값 대체"""

df_new = df.copy()

df_new = df.copy()
df_new.loc[df_new["MEMBER_GENDER"].isnull(), "MEMBER_GENDER"] = df_new["MEMBER_GENDER"].mode()[0]
df_new["MEMBER_GENDER"].value_counts()

df_new['MEMBER_GENDER'].mode()[0]

df_new['MEMBER_GENDER'].value_counts()

df_new['MEMBER_GENDER'].value_counts().index[0]

df_new['MEMBER_GENDER'].isnull()

df_new.loc[  df_new['MEMBER_GENDER'].isnull()   ,  'MEMBER_GENDER'   ]   =  df_new['MEMBER_GENDER'].mode()[0]

df_new.loc[[3, 5, 10], '']

df_new["MEMBER_ANNUAL_INCOME"].value_counts(dropna=False)

df_new["MEMBER_ANNUAL_INCOME"].mean()

df_new["MEMBER_ANNUAL_INCOME"].fillna(100)

df_new["MEMBER_ANNUAL_INCOME"].fillna(df_new["MEMBER_ANNUAL_INCOME"].mean())

df_new["MEMBER_ANNUAL_INCOME"] = df_new["MEMBER_ANNUAL_INCOME"].fillna(df_new["MEMBER_ANNUAL_INCOME"].mean())
df_new["MEMBER_ANNUAL_INCOME"].isnull().sum()

"""## Quiz  
df_new 데이터프레임에서, 결측치가 있는 컬럼을 찾아서 적절한 방식으로 처리합니다. END_DATE 변수는 멤버십 종료일을 나타내고, 현재 가입 유지 중인 경우 결측치로 표현됩니다. 현재 시점의 기준일은 2013년 12월 31일로 계산합니다. 
"""





"""### 이상치 처리"""

sns.boxplot(y='MEMBERSHIP_TERM_YEARS', data=df, palette='Accent');

# 80년 이상인 데이터를 삭제
df.loc[df['MEMBERSHIP_TERM_YEARS'] < 80, :]

# 80년 이상에 대해서는 최대값을 80으로 고정
# df.loc[df['MEMBERSHIP_TERM_YEARS'] > 80, 'MEMBERSHIP_TERM_YEARS'] = 80

"""### 함수 매핑"""

df_new['MEMBER_MARITAL_STATUS'].value_counts(dropna=False)

df_new['MEMBER_MARITAL_STATUS'] = df_new['MEMBER_MARITAL_STATUS'].map({'M':0, 'S':1, 'W':2, 'D':3})
df_new['MEMBER_MARITAL_STATUS'].value_counts(dropna=False)

package_encoding = {'TYPE-A':0, 'TYPE-B':1}

# map
df_new['MEMBERSHIP_PACKAGE'].map(package_encoding)

# apply - lambda
df_new['MEMBERSHIP_PACKAGE'].apply(lambda x: package_encoding[x])

# np.where 연산

np.where(df_new['MEMBERSHIP_PACKAGE']=='TYPE-A', 0, 1)

df

"""## Quiz  
MEMBER_AGE_AT_ISSUE 열의 나이를 비식별화 합니다. (20대, 30대, 40대, ...)
"""

# 히스토그램 
df_new['MEMBER_AGE_AT_ISSUE'].hist()





"""### 데이터프레임 -> Excel 파일"""

df

# df.to_excel('test.xlsx' ,  index=False)

df.to_excel("membership_revised.xlsx", index=False)

"""### Excel 파일 -> 데이터프레임"""

df_new = pd.read_excel("membership_revised.xlsx", engine='openpyxl')
df_new

"""### 데이터프레임 -> CSV 파일"""

df_new.to_csv("membership_revised.csv", index=False)

"""### CSV 파일 -> 데이터프레임"""

df_new = pd.read_csv("membership_revised.csv")
df_new

